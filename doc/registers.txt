Registers.nvim is a minimal but very configurable Neovim plugin.

Almost everything can be configured using the mandatory `registers.setup({})` method.

`packer.nvim` minimal setup:
>
use {
  "tversteeg/registers.nvim",
  config = function()
    require("registers").setup()
  end
}
<

Keys can be bound using functions, to make it easier for use I've made all functions except `registers.setup()` return callback functions that can be configured and passed to fields in the `bind_keys` example.

For example, to apply a delay of a second after selecting the register with it's key (for example pressing the '0' key to apply the '0' register when it's open):
use {
  "tversteeg/registers.nvim",
  config = function()
    local registers = require("registers")
    registers.setup({
      bind_keys = {
        registers = registers.apply_register({ delay = 1 }),
      },
    })
  end
}
<

registers                                                            *registers*

    Fields: ~
        {options}  (options)


================================================================================
`registers.setup` configuration options.                                 *setup*

options                                                                *options*
    `require("registers").setup({...})`

    Fields: ~
        {show}                   (string)                     Which registers to show and in what order. Default is `"*+\"-/_=#%.0123456789abcdefghijklmnopqrstuvwxyz:"`.
        {show_empty}             (boolean)                    Show the registers which aren't filled in a separate line. Default is `true`.
        {preview}                (boolean)                    Show the how the highlighted register will be applied in the target buffer. Default is `true`.
        {register_user_command}  (boolean)                    Whether to register the `:Registers` user command. Default is `true`.
        {system_clipboard}       (boolean)                    Transfer selected register to the system clipboard. Default is `true`.
        {trim_whitespace}        (boolean)                    Don't show whitespace at the begin and and of the registers, won't change the output from applying the register. Default is `true`.
        {hide_only_whitespace}   (boolean)                    Treat registers with only whitespace as empty registers. Default is `true`.
        {show_register_types}    (boolean)                    Show how the register will be applied in the sign bar, the characters can be customized in the `symbols` table. Default is `true`.
        {bind_keys}              (bind_keys_options|boolean)  Which keys to bind, `true` maps all keys and `false` maps no keys.
        {events}                 (events_options)             Functions that will be called when certain events happen.
        {symbols}                (symbols_options)            Symbols used to replace text in the previous buffer.
        {window}                 (window_options)             Floating window
        {sign_highlights}        (sign_highlights_options)    Highlights for the sign section of the window


register_mode                                                    *register_mode*

    Variants: ~
        ("insert")  Insert the register's contents like when in insert mode and pressing <C-R>.
        ("paste")   Insert the register's contents by pretending a pasting action, similar to pressing "*reg*p, cannot be used in insert mode.
        ("motion")  Create a motion from the register, similar to pressing "*reg* (without pasting it yet).


bind_keys_options                                            *bind_keys_options*
    `require("registers").setup({ bind_keys = {...} })`

    Fields: ~
        {normal}     (fun()|false)  Function to map to " in normal mode to display the registers window, `false` to disable the binding. Default is `registers.show_window({ mode = "motion" })`.
        {visual}     (fun()|false)  Function to map to " in visual mode to display the registers window, `false` to disable the binding. Default is `registers.show_window({ mode = "motion" })`.
        {insert}     (fun()|false)  Function to map to <C-R> in insert mode to display the registers window, `false` to disable the binding. Default is `registers.show_window({ mode = "insert" })`.
        {registers}  (fun)


events_options                                                  *events_options*
    `require("registers").setup({ events = {...} })`

    Fields: ~
        {on_register_highlighted}  (fun()|false)  Function that's called when a new register is highlighted when the window is open. Default is `registers.preview_highlighted_register({ if_mode = { "insert", "paste" } })`.


window_border                                                    *window_border*

    Variants: ~
        ("none")
        ("single")
        ("double")
        ("rounded")
        ("solid")
        ("shadow")
        (string[])   An array of eight strings which each corner and side character.


window_options                                                  *window_options*
    `require("registers").setup({ window = {...} })`

    Fields: ~
        {max_width}  (number)


symbols_options                                                *symbols_options*
    `require("registers").setup({ symbols = {...} })`

    Fields: ~
        {newline}  (string)


sign_highlights_options                                *sign_highlights_options*
    `require("registers").setup({ sign_highlights = {...} })`

    Fields: ~
        {cursorline}  (string)


registers.default_options()                          *registers.default_options*
    Get the default values for all options.

    Returns: ~
        {options}  Default values for all options.


registers.setup()                                              *registers.setup*

    Usage: ~
        >
            require("registers").setup({})
        <


registers.options()                                          *registers.options*


registers._namespace()                                    *registers._namespace*


================================================================================
Bindable functions                                                   *callbacks*

show_window_options                                        *show_window_options*
    `require("registers").show_window({...})`

    Fields: ~
        {delay}  (number)         How long, in seconds, to wait before applying the function. Default is `0`.
        {mode}   (register_mode)


registers.show_window()                                  *registers.show_window*

    Returns: ~
        {function}  Function that can be used to pass to configuration options with callbacks.

    Usage: ~
        >
            -- Disable all key bindings
            require("registers").setup({ bind_keys = false })

            -- Define a custom for opening the register window when pressing "r"
            vim.api.nvim_set_keymap("n", "r", "", {
                -- The "paste" argument means that when a register is selected it will automatically be pasted
                callback = require("registers").show_window({ mode = "paste" }),
                -- This is required for the registers window to function
                expr = true
            })
        <


registers._previous_mode()                            *registers._previous_mode*


registers._operator_count()                          *registers._operator_count*


registers._mode()                                              *registers._mode*


callback_options                                              *callback_options*
    `require("registers")...({...})`

    Fields: ~
        {delay}  (number)    How long, in seconds, to wait before applying the function. Default is `0`.
        {after}  (function)


registers.close_window()                                *registers.close_window*

    Returns: ~
        {function}  Function that can be used to pass to configuration options with callbacks.

    Usage: ~
        >
            require("registers").setup({
                bind_keys = {
                    -- Don't apply the register when selecting with Enter but close the window
                    return_key = require("registers").close_window(),
                }
            })
        <


apply_register_options                                  *apply_register_options*
    `require("registers").apply_register({...})`

    Fields: ~
        {mode}  (register_mode)


registers.apply_register()                            *registers.apply_register*

    Returns: ~
        {function}  Function that can be used to pass to configuration options with callbacks.

    Usage: ~
        >
            require("registers").setup({
                bind_keys = {
                    -- Always paste the register when selecting with Enter
                    return_key = require("registers").apply_register({ mode = "paste" }),
                }
            })

            require("registers").setup({
                bind_keys = {
                    -- When pressing a key of the register, wait for another key press before closing the window
                    registers = require("registers").apply_register({ keep_open_until_keypress = true }),
                }
            })
        <


registers._mode()                                              *registers._mode*


registers._mode()                                              *registers._mode*


registers.move_cursor_up()                            *registers.move_cursor_up*

    Returns: ~
        {function}  Function that can be used to pass to configuration options with callbacks.


registers.move_cursor_down()                        *registers.move_cursor_down*

    Returns: ~
        {function}  Function that can be used to pass to configuration options with callbacks.


move_cursor_to_register_options                *move_cursor_to_register_options*
    `require("registers").move_cursor_to_register({...})`

    Fields: ~
        {register}  (string)  Which register to move the cursor to.


                                             *registers.move_cursor_to_register*
registers.move_cursor_to_register({options})
    Move the cursor to the specified register.

    Parameters: ~
        {options}  (callback_options|move_cursor_to_register_options)  Options for firing the callback.

    Returns: ~
        {function}  Function that can be used to pass to configuration options with callbacks.


                                        *registers.preview_highlighted_register*
registers.preview_highlighted_register({options})
    Show a preview of the highlighted register in the target buffer.

    Parameters: ~
        {options}  (callback_options)  Options for firing the callback.

    Returns: ~
        {function}  Function that can be used to pass to configuration options with callbacks.


registers._preview_buffer()                          *registers._preview_buffer*


registers._buffer()                                          *registers._buffer*


registers._window()                                          *registers._window*


registers._window()                                          *registers._window*


registers._register_values()                        *registers._register_values*


registers._empty_registers()                        *registers._empty_registers*


registers._mappings()                                      *registers._mappings*


vim:tw=78:ts=8:noet:ft=help:norl:
